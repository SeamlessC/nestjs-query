"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[9606],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(n),c=a,y=m["".concat(s,".").concat(c)]||m[c]||u[c]||r;return n?o.createElement(y,i(i({ref:t},p),{},{components:n})):o.createElement(y,i({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(7294),a=n(6010);const r="tabItem_Ymn6";function i(e){var t=e.children,n=e.hidden,i=e.className;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>c});var o=n(7462),a=n(7294),r=n(6010),i=n(2389),l=n(7392),s=n(7094),d=n(2466);const p="tabList__CuJ",u="tabItem_LNqP";function m(e){var t,n,i=e.lazy,m=e.block,c=e.defaultValue,y=e.values,b=e.groupId,g=e.className,f=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),T=null!=y?y:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,l.l)(T,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===c?c:null!=(t=null!=c?c:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:f[0].props.value;if(null!==k&&!T.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+T.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var h=(0,s.U)(),O=h.tabGroupChoices,F=h.setTabGroupChoices,D=(0,a.useState)(k),I=D[0],x=D[1],P=[],N=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=b){var w=O[b];null!=w&&w!==I&&T.some((function(e){return e.value===w}))&&x(w)}var E=function(e){var t=e.currentTarget,n=P.indexOf(t),o=T[n].value;o!==I&&(N(t),x(o),null!=b&&F(b,String(o)))},j=function(e){var t,n=null;switch(e.key){case"ArrowRight":var o,a=P.indexOf(e.currentTarget)+1;n=null!=(o=P[a])?o:P[0];break;case"ArrowLeft":var r,i=P.indexOf(e.currentTarget)-1;n=null!=(r=P[i])?r:P[P.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":m},g)},T.map((function(e){var t=e.value,n=e.label,i=e.attributes;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:I===t?0:-1,"aria-selected":I===t,key:t,ref:function(e){return P.push(e)},onKeyDown:j,onFocus:E,onClick:E},i,{className:(0,r.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":I===t})}),null!=n?n:t)}))),i?(0,a.cloneElement)(f.filter((function(e){return e.props.value===I}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==I})}))))}function c(e){var t=(0,i.Z)();return a.createElement(m,(0,o.Z)({key:String(t)},e))}},5725:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>b,frontMatter:()=>d,metadata:()=>u,toc:()=>c});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=n(5488),l=n(5162),s=["components"],d={title:"Relations"},p=void 0,u={unversionedId:"persistence/typegoose/relations",id:"persistence/typegoose/relations",title:"Relations",description:"Relations work a little differently in typegoose when compared to other relational ORMs such as sequelize or",source:"@site/docs/persistence/typegoose/relations.mdx",sourceDirName:"persistence/typegoose",slug:"/persistence/typegoose/relations",permalink:"/nestjs-query/docs/persistence/typegoose/relations",draft:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/persistence/typegoose/relations.mdx",tags:[],version:"current",frontMatter:{title:"Relations"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/nestjs-query/docs/persistence/typegoose/getting-started"},next:{title:"Custom Service",permalink:"/nestjs-query/docs/persistence/typegoose/custom-service"}},m={},c=[{value:"One to Many/Many To One Example",id:"one-to-manymany-to-one-example",level:2},{value:"Many To Many Example",id:"many-to-many-example",level:2}],y={toc:c};function b(e){var t=e.components,n=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Relations work a little differently in ",(0,r.kt)("inlineCode",{parentName:"p"},"typegoose")," when compared to other relational ORMs such as ",(0,r.kt)("inlineCode",{parentName:"p"},"sequelize")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"typeorm"),". You can read more about relations (references) in ",(0,r.kt)("inlineCode",{parentName:"p"},"typegoose")," ","[here]","(",(0,r.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/populate"},"https://mongoosejs.com/docs/populate"),"\n.html)"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"There are multiple ways to set of references in Typegoose. These are intended as a starting point.")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Filtering on references is not supported by Typegoose.")),(0,r.kt)("h2",{id:"one-to-manymany-to-one-example"},"One to Many/Many To One Example"),(0,r.kt)("p",null,"To set up a one to many/many to one relationship in Typegoose, you will store a reference in your document."),(0,r.kt)("p",null,"For example, lets add sub tasks to our todo items by storing a ",(0,r.kt)("inlineCode",{parentName:"p"},"todoItem")," ref on our ",(0,r.kt)("inlineCode",{parentName:"p"},"subTask")," and an array of sub-tasks on our ",(0,r.kt)("inlineCode",{parentName:"p"},"todoItem")," entity."),(0,r.kt)(i.Z,{defaultValue:"todoitem",values:[{label:"TodoItemEntity",value:"todoitem"},{label:"SubTaskEntity",value:"subtask"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"todoitem",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.entity.ts" {24-25}',title:'"todo-item/todo-item.entity.ts"',"{24-25}":!0},"import { Prop, modelOptions } from '@typegoose/typegoose';\nimport { Base } from '@typegoose/typegoose/lib/defaultClasses';\n\n@modelOptions({ schemaOptions: { timestamps: true } })\nexport class TodoItemEntity extends Base {\n  @Prop({ required: true })\n  title!: string;\n\n  @Prop()\n  description?: string;\n\n  @Prop({ required: true })\n  completed!: boolean;\n\n  @Prop({ default: Date.now })\n  createdAt!: Date;\n\n  @Prop({ default: Date.now })\n  updatedAt!: Date;\n\n  @Prop({ default: 0 })\n  priority!: number;\n\n  @Prop({ ref: () => SubTaskEntity })\n  subTasks: Ref<SubTaskEntity>[];\n\n  @Prop()\n  createdBy?: string;\n\n  @Prop()\n  updatedBy?: string;\n}\n"))),(0,r.kt)(l.Z,{value:"subtask",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.entity.ts" {15-16}',title:'"sub-task/sub-task.entity.ts"',"{15-16}":!0},"import { Prop, modelOptions, Ref } from '@typegoose/typegoose';\nimport { Base } from '@typegoose/typegoose/lib/defaultClasses';\n\n@modelOptions({ schemaOptions: { timestamps: true } })\nexport class SubTaskEntity extends Base {\n  @Prop({ required: true })\n  title!: string;\n\n  @Prop()\n  description?: string;\n\n  @Prop({ required: true })\n  completed!: boolean;\n\n  @Prop({ ref: () => TodoItemEntity, required: true })\n  todoItem!: Ref<TodoItemEntity>;\n\n  @Prop()\n  createdAt!: Date;\n\n  @Prop()\n  updatedAt!: Date;\n\n  @Prop()\n  createdBy?: string;\n\n  @Prop()\n  updatedBy?: string;\n}\n")))),(0,r.kt)("p",null,"Now that we have the relationships defined, we can add the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Relation")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@Connection")," to our DTOs"),(0,r.kt)(i.Z,{defaultValue:"todoitem",values:[{label:"TodoItemDTO",value:"todoitem"},{label:"SubTaskDTO",value:"subtask"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"todoitem",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts"',title:'"todo-item/todo-item.dto.ts"'},"import { FilterableField, IDField, KeySet, Connection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../../sub-task/dto/sub-task.dto';\n\n@ObjectType('TodoItem')\n@KeySet(['id'])\n// disable the remove because mongoose does not support removing a virtual\n@Connection('subTasks', () => SubTaskDTO, { disableRemove: true })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  createdAt!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updatedAt!: Date;\n\n  @Field()\n  age!: number;\n\n  @FilterableField()\n  priority!: number;\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n"))),(0,r.kt)(l.Z,{value:"subtask",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.dto.ts"',title:'"sub-task/sub-task.dto.ts"'},"import { FilterableField, IDField, KeySet, Relation } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { TodoItemDTO } from '../../todo-item/dto/todo-item.dto';\n\n@ObjectType('SubTask')\n@KeySet(['id'])\n// disable the remove because a sub task cannot exist without a todoitem\n@Relation('todoItem', () => TodoItemDTO, { disableRemove: true })\nexport class SubTaskDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  createdAt!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updatedAt!: Date;\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n")))),(0,r.kt)("h2",{id:"many-to-many-example"},"Many To Many Example"),(0,r.kt)("p",null,"In this example, we'll add ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"todoItems")," by storing an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"tag")," references on the ",(0,r.kt)("inlineCode",{parentName:"p"},"todoItems"),"."),(0,r.kt)(i.Z,{defaultValue:"todoitem",values:[{label:"TodoItemEntity",value:"todoitem"},{label:"TagEntity",value:"tag"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"todoitem",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.entity.ts" {21-23}',title:'"todo-item/todo-item.entity.ts"',"{21-23}":!0},"import { Prop, modelOption, Ref } from '@typegoose/typegoose';\nimport { Base } from '@typegoose/typegoose/lib/defaultClasses';\n\n@modelOptions({ schemaOptions: { timestamps: true } })\nexport class TodoItemEntity extends Base {\n  @Prop({ required: true })\n  title!: string;\n\n  @Prop()\n  description?: string;\n\n  @Prop({ required: true })\n  completed!: boolean;\n\n  @Prop({ default: Date.now })\n  createdAt!: Date;\n\n  @Prop({ default: Date.now })\n  updatedAt!: Date;\n\n  @Prop({ ref: () => TagEntity })\n  tags!: Ref<TagEntity>[];\n\n  @Prop({ default: 0 })\n  priority!: number;\n\n  @Prop()\n  createdBy?: string;\n\n  @Prop()\n  updatedBy?: string;\n\n  public get id(): string {\n    // eslint-disable-next-line no-underscore-dangle\n    return this._id.toHexString();\n  }\n}\n\n"))),(0,r.kt)(l.Z,{value:"tag",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="tag/tag.entity.ts" {33-38}',title:'"tag/tag.entity.ts"',"{33-38}":!0},"import { Base } from '@typegoose/typegoose/lib/defaultClasses';\nimport { Prop, modelOptions, Ref } from '@typegoose/typegoose';\nimport { Types } from 'mongoose';\nimport { TodoItemEntity } from '../todo-item/todo-item.entity';\n\n@modelOptions({\n  schemaOptions: {\n    timestamps: true,\n    collection: 'tags',\n    toObject: { virtuals: true },\n  },\n})\nexport class TagEntity implements Base {\n  _id!: Types.ObjectId;\n\n  id!: string;\n\n  @Prop({ required: true })\n  name!: string;\n\n  @Prop()\n  createdAt!: Date;\n\n  @Prop()\n  updatedAt!: Date;\n\n  @Prop()\n  createdBy?: string;\n\n  @Prop()\n  updatedBy?: string;\n\n  @Prop({\n    ref: 'TodoItemEntity',\n    localField: '_id',\n    foreignField: 'tags',\n  })\n  todoItems?: Ref<TodoItemEntity>[];\n}\n")))),(0,r.kt)("p",null,"Now that we have the relationship defined, we can add the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Connection")," to our DTOS"),(0,r.kt)(i.Z,{defaultValue:"todoitem",values:[{label:"TodoItemDTO",value:"todoitem"},{label:"TagDTO",value:"tag"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"todoitem",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts"',title:'"todo-item/todo-item.dto.ts"'},"import { FilterableField, IDField, KeySet, Connection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { TagDTO } from '../../tag/dto/tag.dto';\n\n@ObjectType('TodoItem')\n@KeySet(['id'])\n@Connection('tags', () => TagDTO)\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  createdAt!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updatedAt!: Date;\n\n  @Field()\n  age!: number;\n\n  @FilterableField()\n  priority!: number;\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n"))),(0,r.kt)(l.Z,{value:"tag",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="tag/tag.dto.ts"',title:'"tag/tag.dto.ts"'},"import { FilterableField, IDField, KeySet, Connection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { TodoItemDTO } from '../../todo-item/dto/todo-item.dto';\n\n@ObjectType('Tag')\n@KeySet(['id'])\n// disable update and remove since it is a virtual in the entity\n@Connection('todoItems', () => TodoItemDTO, { disableUpdate: true, disableRemove: true })\nexport class TagDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  name!: string;\n\n  @FilterableField(() => GraphQLISODateTime)\n  createdAt!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updatedAt!: Date;\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n")))))}b.isMDXComponent=!0}}]);